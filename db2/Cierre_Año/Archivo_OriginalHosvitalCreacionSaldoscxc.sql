--  Generar SQL 
--  Versión:                   	V7R1M0 100423 
--  Generado en:              	19/01/21 15:37:30 
--  Base de datos relacional:       	S10B409T 
--  Opción de estándares:          	DB2 for i 
SET PATH "QSYS","QSYS2","SYSPROC","SYSIBMADM","ABERNAL" ; 
  
CREATE PROCEDURE HOSVITAL.SP_INICIALIZAR_SALDOS ( 
	INOUT V_EMPCOD_IN CHAR(2) , 
	INOUT V_ANIOBASE SMALLINT , 
	INOUT V_ANIOGENE SMALLINT , 
	INOUT V_TIPOCUENTAS CHAR(1) ) 
	LANGUAGE SQL 
	SPECIFIC HOSVITAL.SP_INICIALIZAR_SALDOS 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *NONE , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = HOSVITAL , 
	DYNDFTCOL = *NO , 
	DYNUSRPRF = *USER , 
	SRTSEQ = *HEX   
	BEGIN 
DECLARE V_EMPCOD CHAR ( 2 ) ; 
	DECLARE V_CNTVIG	SMALLINT ; 
	DECLARE V_CNTCOD	CHAR ( 20 ) ; 
	DECLARE V_MCDPTO	CHAR ( 9 ) ; 
	DECLARE V_NATCUENTA CHAR ( 1 ) ; 
	DECLARE V_DC016C	CHAR ( 20 ) ; 
	DECLARE V_PRVCOD	CHAR ( 15 ) ; 
	DECLARE V_HOPNOOBL	CHAR ( 15 ) ; 
	DECLARE V_HOPTOTCRE	DECIMAL ( 17 , 2 ) ; 
	DECLARE V_HOPTOTDEB	DECIMAL ( 17 , 2 ) ; 
	DECLARE V_CNUCOD	CHAR ( 3 ) ; 
	DECLARE V_CNUSUB	CHAR ( 3 ) ; 
	DECLARE V_VLRMOV	DECIMAL ( 17 , 2 ) ; 
	DECLARE V_VAL_CUENTAS CHAR ( 1 ) ; /*Valida Cuentas Creadas en la tabla Cuentas*/ 
	DECLARE V_CREDITOS	DECIMAL ( 17 , 2 ) ; 
	DECLARE V_DEBITOS DECIMAL ( 17 , 2 ) ; 
	DECLARE V_ULTIMOID	DECIMAL ( 18 , 0 ) ; 
	DECLARE V_DETALLECNTCOD CHAR ( 1 ) ; 
  
	/*HOJOBL*/ 
	DECLARE V_DOCCOD	CHAR ( 3 ) ;			DECLARE V_HOJNUMOBL	CHAR ( 15 ) ; 
	DECLARE V_CLICOD	CHAR ( 15 ) ;			DECLARE V_MENNIT	CHAR ( 13 ) ; 
	DECLARE V_HOJFCHOBL	TIMESTAMP ;			DECLARE V_HOJVLRCUO	DECIMAL ( 17 , 2 ) ; 
	DECLARE V_HOJCUOINI	DECIMAL ( 17 , 2 ) ;		DECLARE V_HOJVLROBL	DECIMAL ( 17 , 2 ) ; 
	DECLARE V_HOJTOTCRE	DECIMAL ( 17 , 2 ) ;		DECLARE V_HOJTOTDEB	DECIMAL ( 17 , 2 ) ; 
	DECLARE V_HOJTIPPAG	CHAR ( 3 ) ;			DECLARE V_HOJTPPGDS	CHAR ( 30 ) ; 
	DECLARE V_HOJNUMCUO	INT ;				DECLARE V_HOJNROREM	INT ; 
	DECLARE V_HOJFCHREM	DATE ;			DECLARE V_HOJNRORAD	CHAR ( 20 ) ; 
	DECLARE V_HOJFCHRAD	TIMESTAMP ;			DECLARE V_HOJTIPGLO	CHAR ( 1 ) ; 
	DECLARE V_HOJSTAGLO	CHAR ( 1 ) ;			DECLARE V_HFCHRECGL	DATE ; 
	DECLARE V_HJFCHRADGL DATE ;		DECLARE V_HJFCANOBL	DATE ; 
	DECLARE V_HOJVLRGLO	DECIMAL ( 17 , 2 ) ;		DECLARE V_HOINDDEV	CHAR ( 1 ) ; 
	DECLARE V_HONORADG	CHAR ( 20 ) ;			DECLARE V_HOJMATIPD	CHAR ( 2 ) ; 
	DECLARE V_HOJNROCAS	DECIMAL ( 15 , 0 ) ;		DECLARE V_HOJCARRCH	CHAR ( 1 ) ; 
	DECLARE V_CONTIP	SMALLINT ;			DECLARE V_CONCOD	VARCHAR ( 20 ) ; 
	DECLARE V_HOJFCHRCH	TIMESTAMP ;			DECLARE V_HOJUSRRCH	CHAR ( 10 ) ; 
	DECLARE V_HOJINDFAC	CHAR ( 1 ) ;			DECLARE V_HOJDOCRES	CHAR ( 15 ) ; 
	DECLARE V_HOJNOMRES	CHAR ( 30 ) ;			DECLARE V_HOJAPERES	CHAR ( 30 ) ; 
	DECLARE V_HOJCNSING	SMALLINT ;			DECLARE V_HOJESTHOM	CHAR ( 1 ) ; 
	DECLARE V_HOJINDREC	CHAR ( 1 ) ;			DECLARE V_HOJPRF	CHAR ( 7 ) ; 
	DECLARE V_HOJFCHRAR	TIMESTAMP ;			DECLARE V_HOJNUMRAR	CHAR ( 20 ) ; 
	DECLARE V_HOJUSUINF	CHAR ( 10 ) ;			DECLARE V_HOJFCHINF	TIMESTAMP ; 
	DECLARE V_HOJINDINF	CHAR ( 1 ) ;			DECLARE V_HOJOBLCLU	CHAR ( 10 ) ; 
	DECLARE V_HOJOBLCLF	TIMESTAMP ;			DECLARE V_HOJOBLCLE	CHAR ( 3 ) ; 
  
/*HOJOBLPRV*/ 
	DECLARE V_CNCCOD	CHAR ( 9 ) ;		DECLARE V_CNTSUB	CHAR ( 9 ) ; 
	DECLARE V_HOPFCHOBL	TIMESTAMP ;		DECLARE V_HOPFCHRAD	TIMESTAMP ; 
	DECLARE V_HOPTPPZ	CHAR ( 3 ) ;		DECLARE V_HOPVLRCUO	DECIMAL ( 17 , 2 ) ; 
	DECLARE V_HOPCUOINI	DECIMAL ( 17 , 2 ) ;	DECLARE V_HOPVLROBL	DECIMAL ( 17 , 2 ) ; 
	DECLARE V_HOPVLRMEX	DECIMAL ( 17 , 2 ) ;	DECLARE V_HOPMVTER	CHAR ( 1 ) ; 
	DECLARE V_HOJFCHCAN	DATE ;		DECLARE V_HOPESTAFPT CHAR ( 1 ) ; 
	DECLARE V_HOJNROOC	DECIMAL ( 15 , 0 ) ;	DECLARE V_HOJBASDES	DECIMAL ( 17 , 2 ) ; 
	DECLARE V_HOJDOCOC	CHAR ( 3 ) ;		DECLARE V_HOPSEDCAU	CHAR ( 9 ) ; 
	DECLARE V_HOPDOCCAU	CHAR ( 3 ) ;		DECLARE V_HOPNROCAU	DECIMAL ( 15 , 0 ) ; 
	DECLARE V_HOPHOM	CHAR ( 1 ) ;		DECLARE V_HOJSEDOC	CHAR ( 9 ) ; 
	DECLARE V_HOPCODCON	CHAR ( 13 ) ;		DECLARE V_HOPCODCOR	CHAR ( 13 ) ; 
SET V_VAL_CUENTAS = 'S' ; 
  
DECLARE GLOBAL TEMPORARY TABLE SESSION . V_T_PLANCUENTAS ( CNTCOD CHAR ( 20 ) , CNTTRM CHAR ( 20 ) ) ON COMMIT DELETE ROWS NOT LOGGED WITH REPLACE ; 
CREATE INDEX SESSION . IND_V_T_PLANCUENTAS ON SESSION . V_T_PLANCUENTAS ( CNTCOD_BASE ) ; 
  
DECLARE GLOBAL TEMPORARY TABLE SESSION . V_T_CNTCOD ( CNTCOD_BASE CHAR ( 20 ) , CNTCOD_GENE CHAR ( 20 ) ) ON COMMIT DELETE ROWS NOT LOGGED WITH REPLACE ; 
CREATE INDEX SESSION . IND_V_T_CNTCOD ON SESSION . V_T_CNTCOD ( CNTCOD_BASE ) ; 
  
DECLARE GLOBAL TEMPORARY TABLE SESSION . V_T_MOVCXC ( EMPCOD	CHAR ( 2 ) ,		DOCCOD CHAR ( 3 ) ,		MCDPTO CHAR ( 9 ) , 
MVCXCNRO DECIMAL ( 15 , 0 ) , MCCCSC DECIMAL ( 5 , 0 ) , CNTVIG DECIMAL ( 4 , 0 ) , 
MCCFCH TIMESTAMP ,		MVCXCMON CHAR ( 3 ) ,		MVCXCTAS DECIMAL ( 11 , 2 ) , 
MCCNUMOBL CHAR ( 15 ) ,	CNTCOD CHAR ( 20 ) ,	MCCNAT CHAR ( 1 ) , 
CLICOD CHAR ( 15 ) ,		MENNIT CHAR ( 13 ) , MCCVLR DECIMAL ( 17 , 2 ) , 
CNUCOD CHAR ( 3 ) ,		CNUSUB CHAR ( 3 ) ,		CNCCOD CHAR ( 9 ) , 
CNTSUB CHAR ( 9 ) ,	MCCCNC CHAR ( 100 ) ,	MCCANU CHAR ( 1 ) , 
MCCDOCFAC CHAR ( 3 ) , MVCCLIRCL CHAR ( 15 ) , MVCCNTRCL CHAR ( 20 ) , 
MOVPRF CHAR ( 7 ) ) ON COMMIT DELETE ROWS WITH REPLACE NOT LOGGED ; 
CREATE UNIQUE INDEX SESSION . IND_V_MOVCXC ON SESSION . V_T_MOVCXC ( EMPCOD , CLICOD , CNTCOD , CNTVIG , MCCNUMOBL , MCCDOCFAC ) ; 
  
DECLARE GLOBAL TEMPORARY TABLE SESSION . V_T_MOVCXP ( EMPCOD CHAR ( 2 ) ,		DOCCOD CHAR ( 3 ) ,		MCDPTO CHAR ( 9 ) , 
MVCXPNRO DECIMAL ( 15 , 0 ) , MVCXPCSC DECIMAL ( 5 , 0 ) , CNTVIG DECIMAL ( 4 , 0 ) , 
MVCXPFCH TIMESTAMP ,	MVCXPMB CHAR ( 3 ) ,	MVCXPTC DECIMAL ( 11 , 2 ) , 
MVCXPNUOB CHAR ( 15 ) ,	CNTCOD CHAR ( 20 ) ,	PRVCOD CHAR ( 15 ) , 
MVCXPNAT CHAR ( 1 ) ,		MVCXPVAL DECIMAL ( 17 , 2 ) , MVCXPVEX DECIMAL ( 17 , 2 ) , 
CNUCOD CHAR ( 3 ) , CNUSUB CHAR ( 3 ) ,		CNCCOD CHAR ( 9 ) , 
CNTSUB CHAR ( 9 ) ,		MVCXPCNC CHAR ( 100 ) ,	MVCXPACT CHAR ( 1 ) , 
MVCXPTER CHAR ( 1 ) ,		FLJCAJCOD CHAR ( 4 ) ,	FLJCAJCON CHAR ( 4 ) ) ON COMMIT DELETE ROWS WITH REPLACE NOT LOGGED ; 
CREATE UNIQUE INDEX SESSION . IND_V_T_MOVCXP ON SESSION . V_T_MOVCXP ( EMPCOD , MCDPTO , PRVCOD , CNTCOD , CNTVIG , MVCXPNUOB ) ; 
  
INSERT INTO V_T_PLANCUENTAS 
	SELECT CNTCOD , CNTTRM FROM CUENTAS WHERE EMPCOD = V_EMPCOD_IN AND CNTVIG = V_ANIOGENE ORDER BY CNTCOD ; 
  
	IF EXISTS ( SELECT * FROM TMPREP WHERE TMPREPPRC = 'VALIDA_CNTCOD_CXC' ) THEN 
		UPDATE TMPREP 
		SET TMPREPDAT = '0' 
		WHERE TMPREPPRC = 'VALIDA_CNTCOD_CXC' ; 
	ELSE 
		SET V_ULTIMOID = ( SELECT MAX ( TMPREPID ) + 1 FROM TMPREP ) ; 
		INSERT INTO TMPREP 
		VALUES ( V_ULTIMOID , 'VALIDA_CNTCOD_CXC' , '0' ) ; 
	END IF ; 
	 
	IF EXISTS ( SELECT * FROM TMPREP WHERE TMPREPPRC = 'VALIDA_CNTCOD_CXP' ) THEN 
		UPDATE TMPREP 
		SET TMPREPDAT = '0' 
		WHERE TMPREPPRC = 'VALIDA_CNTCOD_CXP' ; 
	ELSE 
		SET V_ULTIMOID = ( SELECT MAX ( TMPREPID ) + 1 FROM TMPREP ) ; 
		INSERT INTO TMPREP 
		VALUES ( V_ULTIMOID , 'VALIDA_CNTCOD_CXP' , '0' ) ; 
	END IF ; 
	 
  
	/*CUENTAS POR COBRAR*/ 
	IF ( V_TIPOCUENTAS = 'C' ) THEN 
FOR CUR_VALIDACUENTASC AS CUR_VALIDACUENTASC CURSOR FOR 
SELECT DISTINCT CNTCOD 
FROM HOJOBL 
WHERE EMPCOD = V_EMPCOD_IN AND CNTVIG = V_ANIOBASE 
GROUP BY CNTCOD 
HAVING ( SUM ( HOJTOTCRE ) - SUM ( HOJTOTDEB ) ) <> 0 
DO 
SET V_CNTCOD = CNTCOD ; 
  
INSERT INTO SESSION . V_T_CNTCOD ( CNTCOD_BASE , CNTCOD_GENE ) 
VALUES ( V_CNTCOD , IFNULL ( ( SELECT DC016C2 FROM DC016 WHERE DC016V1 = V_ANIOBASE AND DC016C1 = V_CNTCOD AND DC016TI = 1 ) , V_CNTCOD ) ) ; 
  
SELECT DC016C2 INTO V_CNTCOD FROM DC016 WHERE DC016V1 = V_ANIOBASE AND DC016C1 = V_CNTCOD AND DC016TI = 1 ; 
  
SELECT CNTTRM INTO V_DETALLECNTCOD FROM V_T_PLANCUENTAS WHERE CNTCOD = V_CNTCOD FETCH FIRST 1 ROWS ONLY ; 
  
				IF ( V_DETALLECNTCOD IS NULL OR V_DETALLECNTCOD = '' ) THEN 
					UPDATE TMPREP 
					SET TMPREPDAT = CONCAT ( 'Debe crear la cuenta ' , CONCAT ( TRIM ( V_CNTCOD ) , CONCAT ( ' para la Vigencia ' , V_ANIOBASE ) ) ) 
					WHERE TMPREPPRC = 'VALIDA_CNTCOD_CXC' ; 
					SET V_VAL_CUENTAS = 'N' ; 
				ELSE 
IF ( V_DETALLECNTCOD <> 'D' ) THEN 
					UPDATE TMPREP 
					SET TMPREPDAT = CONCAT ( 'Cuenta ' , CONCAT ( TRIM ( V_CNTCOD ) , CONCAT ( ' no es de tipo Detalle para la Vigencia ' , V_ANIOGENE ) ) ) 
					WHERE TMPREPPRC = 'VALIDA_CNTCOD_CXC' ; 
					SET V_VAL_CUENTAS = 'N' ; 
				END IF ; 
END IF ; 
END FOR ; 
/*MOVCXC Data del año a generar - Optimizado!*/ 
INSERT INTO SESSION . V_T_MOVCXC 
SELECT * FROM MOVCXC WHERE EMPCOD = V_EMPCOD_IN AND CNTVIG = V_CNTVIG ORDER BY EMPCOD , CLICOD , CNTCOD , CNTVIG , MCCNUMOBL , MCCDOCFAC ; 
  
  
		IF ( V_VAL_CUENTAS = 'S' ) THEN 
			FOR CUR_CUENTASXCOBRAR AS CUR_CUENTASXCOBRAR CURSOR FOR 
				SELECT * 
				FROM HOJOBL 
				WHERE EMPCOD = V_EMPCOD_IN AND CNTVIG = V_ANIOBASE 
				GROUP BY EMPCOD , HOJNUMOBL , CLICOD , CNTVIG , CNTCOD , MCDPTO , DOCCOD , MENNIT , CNUCOD , CNUSUB , HOJFCHOBL , HOJVLRCUO , HOJCUOINI , 
						HOJVLROBL , HOJTOTCRE , HOJTOTDEB , HOJTIPPAG , HOJTPPGDS , HOJNUMCUO , HOJNROREM , HOJFCHREM , HOJNRORAD , HOJFCHRAD , HOJTIPGLO , HOJSTAGLO , HFCHRECGL , 
						HJFCHRADGL , HJFCANOBL , HOJVLRGLO , HOINDDEV , HONORADG , HOJMATIPD , HOJNROCAS , HOJCARRCH , CONTIP , CONCOD ,	HOJFCHRCH , HOJUSRRCH , HOJINDFAC , 
						HOJDOCRES , HOJNOMRES , HOJAPERES , HOJCNSING , HOJESTHOM , HOJINDREC , HOJPRF , HOJFCHRAR , HOJNUMRAR , HOJUSUINF , HOJFCHINF , HOJINDINF , HOJOBLCLU , 
						HOJOBLCLF , HOJOBLCLE 
				HAVING ( SUM ( HOJTOTDEB ) - SUM ( HOJTOTCRE ) ) <> 0 
			DO 
			SET ( V_EMPCOD , V_HOJNUMOBL , V_CLICOD , V_CNTVIG , V_CNTCOD , V_MCDPTO , V_DOCCOD , 
				V_MENNIT , V_CNUCOD , V_CNUSUB , V_HOJFCHOBL , V_HOJVLRCUO , V_HOJCUOINI , V_HOJVLROBL , 
				V_HOJTOTCRE , V_HOJTOTDEB , V_HOJTIPPAG , V_HOJTPPGDS , V_HOJNUMCUO , V_HOJNROREM , V_HOJFCHREM , 
				V_HOJNRORAD , V_HOJFCHRAD , V_HOJTIPGLO , V_HOJSTAGLO , V_HFCHRECGL , V_HJFCHRADGL , V_HJFCANOBL , 
				V_HOJVLRGLO , V_HOINDDEV , V_HONORADG , V_HOJMATIPD , V_HOJNROCAS , V_HOJCARRCH , V_CONTIP , 
				V_CONCOD , V_HOJFCHRCH , V_HOJUSRRCH , V_HOJINDFAC , V_HOJDOCRES , V_HOJNOMRES , V_HOJAPERES , 
				V_HOJCNSING , V_HOJESTHOM , V_HOJINDREC , V_HOJPRF , V_HOJFCHRAR , V_HOJNUMRAR , V_HOJUSUINF , 
				V_HOJFCHINF , V_HOJINDINF , V_HOJOBLCLU , V_HOJOBLCLF , V_HOJOBLCLE ) 
			= 
				( EMPCOD , HOJNUMOBL , CLICOD , CNTVIG , CNTCOD , MCDPTO , DOCCOD , 
				MENNIT , CNUCOD , CNUSUB , HOJFCHOBL , HOJVLRCUO , HOJCUOINI , HOJVLROBL , 
				HOJTOTCRE , HOJTOTDEB , HOJTIPPAG , HOJTPPGDS , HOJNUMCUO , HOJNROREM , HOJFCHREM , 
				HOJNRORAD , HOJFCHRAD , HOJTIPGLO , HOJSTAGLO , HFCHRECGL , HJFCHRADGL , HJFCANOBL , 
				HOJVLRGLO , HOINDDEV , HONORADG , HOJMATIPD , HOJNROCAS , HOJCARRCH , CONTIP , 
				CONCOD , HOJFCHRCH , HOJUSRRCH , HOJINDFAC , HOJDOCRES , HOJNOMRES , HOJAPERES , 
				HOJCNSING , HOJESTHOM , HOJINDREC , HOJPRF , HOJFCHRAR , HOJNUMRAR , HOJUSUINF , 
				HOJFCHINF , HOJINDINF , HOJOBLCLU , HOJOBLCLF , HOJOBLCLE ) ; 
					 
				 
				SELECT CNTCOD_GENE INTO V_DC016C FROM SESSION . V_T_CNTCOD WHERE CNTCOD_BASE = V_CNTCOD ; 
				 
				SELECT SUM ( CASE WHEN MCCNAT = 'C' THEN MCCVLR ELSE 0 END ) , 
					SUM ( CASE WHEN MCCNAT = 'D' THEN MCCVLR ELSE 0 END ) 
					INTO V_CREDITOS , V_DEBITOS 
				FROM SESSION . V_T_MOVCXC 
				WHERE EMPCOD = V_EMPCOD AND CLICOD = V_CLICOD AND CNTCOD = V_CNTCOD AND CNTVIG = V_ANIOGENE AND 
					MCCNUMOBL = V_HOJNUMOBL AND MCCDOCFAC = V_DOCCOD ; 
				 
				/*Valida si Existe HOJOBL*/ 
				IF EXISTS ( SELECT 1 
							FROM HOJOBL 
							WHERE EMPCOD = V_EMPCOD AND HOJNUMOBL = V_HOJNUMOBL AND CLICOD = V_CLICOD AND CNTVIG = V_ANIOGENE AND 
								CNTCOD = V_DC016C AND MCDPTO = V_MCDPTO AND DOCCOD = V_DOCCOD FETCH FIRST 1 ROWS ONLY ) THEN 
					UPDATE HOJOBL 
					SET HOJTOTCRE = ( HOJTOTCRE + IFNULL ( V_CREDITOS , 0 ) ) , 
						HOJTOTDEB = ( HOJTOTDEB + IFNULL ( V_DEBITOS , 0 ) ) 
					WHERE EMPCOD = V_EMPCOD AND HOJNUMOBL = V_HOJNUMOBL AND CLICOD = V_CLICOD AND CNTVIG = V_ANIOGENE AND 
						CNTCOD = V_CNTCOD AND MCDPTO = V_MCDPTO AND DOCCOD = V_DOCCOD ; 
				ELSE 
					INSERT INTO HOJOBL 
					VALUES ( V_EMPCOD , V_HOJNUMOBL , V_CLICOD , V_ANIOGENE , V_DC016C , V_MCDPTO , V_DOCCOD , V_MENNIT , V_CNUCOD , V_CNUSUB , V_HOJFCHOBL , V_HOJVLRCUO , V_HOJCUOINI , V_HOJVLROBL , 
						( V_HOJTOTCRE + IFNULL ( V_CREDITOS , 0 ) ) , ( V_HOJTOTDEB + IFNULL ( V_DEBITOS , 0 ) ) , V_HOJTIPPAG , V_HOJTPPGDS , V_HOJNUMCUO , V_HOJNROREM , V_HOJFCHREM , V_HOJNRORAD , 
							V_HOJFCHRAD , V_HOJTIPGLO , V_HOJSTAGLO , V_HFCHRECGL , V_HJFCHRADGL , V_HJFCANOBL , V_HOJVLRGLO , V_HOINDDEV , V_HONORADG , V_HOJMATIPD , V_HOJNROCAS , V_HOJCARRCH , 
							V_CONTIP , V_CONCOD , V_HOJFCHRCH , V_HOJUSRRCH , V_HOJINDFAC , V_HOJDOCRES , V_HOJNOMRES , V_HOJAPERES , V_HOJCNSING , V_HOJESTHOM , V_HOJINDREC , V_HOJPRF , V_HOJFCHRAR , 
							V_HOJNUMRAR , V_HOJUSUINF , V_HOJFCHINF , V_HOJINDINF , V_HOJOBLCLU , V_HOJOBLCLF , V_HOJOBLCLE ) ; 
				END IF ; 
			END FOR ; 
		END IF ; 
END IF ; 
IF ( V_TIPOCUENTAS = 'P' ) THEN 
		FOR CUR_VALIDACUENTASP AS CUR_VALIDACUENTASP CURSOR FOR 
			SELECT DISTINCT CNTCOD 
			FROM HOJOBLPRV 
			WHERE EMPCOD = V_EMPCOD_IN AND CNTVIG = V_ANIOBASE 
			GROUP BY CNTCOD 
			HAVING ( SUM ( HOPTOTCRE ) - SUM ( HOPTOTDEB ) ) <> 0 
		DO 
			SET V_CNTCOD = CNTCOD ; 
  
			INSERT INTO SESSION . V_T_CNTCOD ( CNTCOD_BASE , CNTCOD_GENE ) 
			VALUES ( V_CNTCOD , IFNULL ( ( SELECT DC016C2 FROM DC016 WHERE DC016V1 = V_ANIOBASE AND DC016C1 = V_CNTCOD AND DC016TI = 1 ) , V_CNTCOD ) ) ; 
  
			SELECT DC016C2 INTO V_CNTCOD FROM DC016 WHERE DC016V1 = V_ANIOBASE AND DC016C1 = V_CNTCOD AND DC016TI = 1 ; 
  
SELECT CNTTRM INTO V_DETALLECNTCOD FROM V_T_PLANCUENTAS WHERE CNTCOD = V_CNTCOD FETCH FIRST 1 ROWS ONLY ; 
  
			IF ( V_DETALLECNTCOD IS NULL OR V_DETALLECNTCOD = '' ) THEN 
				UPDATE TMPREP 
				SET TMPREPDAT = CONCAT ( 'Debe crear la cuenta ' , CONCAT ( TRIM ( V_CNTCOD ) , CONCAT ( ' para la Vigencia ' , V_ANIOBASE ) ) ) 
				WHERE TMPREPPRC = 'VALIDA_CNTCOD_CXP' ; 
				SET V_VAL_CUENTAS = 'N' ; 
			ELSE 
IF ( V_DETALLECNTCOD <> 'D' ) THEN 
					UPDATE TMPREP 
					SET TMPREPDAT = CONCAT ( 'Cuenta ' , CONCAT ( TRIM ( V_CNTCOD ) , CONCAT ( ' no es de tipo Detalle para la Vigencia ' , V_ANIOGENE ) ) ) 
					WHERE TMPREPPRC = 'VALIDA_CNTCOD_CXP' ; 
				SET V_VAL_CUENTAS = 'N' ; 
			END IF ; 
END IF ; 
		END FOR ; 
/*MOVCXP Data del año a generar - Optimizado!*/ 
INSERT INTO SESSION . V_T_MOVCXP 
SELECT * FROM MOVCXP WHERE EMPCOD = V_EMPCOD_IN AND CNTVIG = V_CNTVIG ORDER BY EMPCOD , MCDPTO , PRVCOD , CNTCOD , CNTVIG , MVCXPNUOB ; 
  
IF ( V_VAL_CUENTAS = 'S' ) THEN 
			FOR CUR_CUENTASXPAGAR AS CUR_CUENTASXPAGAR CURSOR FOR 
				SELECT * 
				FROM HOJOBLPRV 
				WHERE EMPCOD = V_EMPCOD_IN AND CNTVIG = V_ANIOBASE 
				GROUP BY EMPCOD , PRVCOD , HOPNOOBL , MCDPTO , CNTVIG , CNTCOD , CNUCOD , CNUSUB , CNCCOD , CNTSUB , HOPFCHOBL , HOPFCHRAD , 
						HOPTPPZ , HOPVLRCUO , HOPCUOINI , HOPVLROBL , HOPVLRMEX , HOPTOTCRE , HOPTOTDEB , HOPMVTER , HOJFCHCAN , HOPESTAFPT , HOJNROOC , HOJBASDES , 
						HOJDOCOC , HOPSEDCAU , HOPDOCCAU , HOPNROCAU , HOPHOM , HOJSEDOC , HOPCODCON , HOPCODCOR 
				HAVING ( SUM ( HOPTOTCRE ) - SUM ( HOPTOTDEB ) ) <> 0 
			DO 
				SET ( V_EMPCOD , V_PRVCOD , V_HOPNOOBL , V_MCDPTO , V_CNTVIG , V_CNTCOD , V_CNUCOD , V_CNUSUB , V_CNCCOD , V_CNTSUB , 
					V_HOPFCHOBL , V_HOPFCHRAD , V_HOPTPPZ , V_HOPVLRCUO , V_HOPCUOINI , V_HOPVLROBL , V_HOPVLRMEX , V_HOPTOTCRE , V_HOPTOTDEB , V_HOPMVTER , 
					V_HOJFCHCAN , V_HOPESTAFPT , V_HOJNROOC , V_HOJBASDES , V_HOJDOCOC , V_HOPSEDCAU , V_HOPDOCCAU , V_HOPNROCAU , V_HOPHOM , V_HOJSEDOC , 
					V_HOPCODCON , V_HOPCODCOR ) 
				= ( EMPCOD , PRVCOD , HOPNOOBL , MCDPTO , CNTVIG , CNTCOD , CNUCOD , CNUSUB , CNCCOD , CNTSUB , HOPFCHOBL , HOPFCHRAD , 
					HOPTPPZ , HOPVLRCUO , HOPCUOINI , HOPVLROBL , HOPVLRMEX , HOPTOTCRE , HOPTOTDEB , HOPMVTER , HOJFCHCAN , HOPESTAFPT , HOJNROOC , HOJBASDES , 
					HOJDOCOC , HOPSEDCAU , HOPDOCCAU , HOPNROCAU , HOPHOM , HOJSEDOC , HOPCODCON , HOPCODCOR ) ; 
			 
				SELECT CNTCOD_GENE INTO V_DC016C FROM SESSION . V_T_CNTCOD WHERE CNTCOD_BASE = V_CNTCOD ORDER BY CNTCOD_BASE ; 
				 
				SELECT SUM ( CASE WHEN MVCXPNAT = 'C' THEN MVCXPVAL ELSE 0 END ) , 
					SUM ( CASE WHEN MVCXPNAT = 'D' THEN MVCXPVAL ELSE 0 END ) 
				INTO V_CREDITOS , V_DEBITOS 
				FROM SESSION . V_T_MOVCXP 
				WHERE EMPCOD = V_EMPCOD AND MCDPTO = V_MCDPTO AND PRVCOD = V_PRVCOD AND 
					CNTCOD = V_DC016C AND CNTVIG = V_ANIOGENE AND MVCXPNUOB = V_HOPNOOBL ; 
				 
				/*Valida si Existe HOJOBLPRV*/ 
				IF EXISTS ( SELECT 1 FROM HOJOBLPRV 
							WHERE EMPCOD = V_EMPCOD AND PRVCOD = V_PRVCOD AND HOPNOOBL = V_HOPNOOBL AND MCDPTO = V_MCDPTO AND 
									CNTVIG = V_ANIOGENE AND CNTCOD = V_DC016C FETCH FIRST 1 ROWS ONLY ) THEN 
					UPDATE HOJOBLPRV 
					SET HOPTOTCRE = ( HOPTOTCRE + IFNULL ( V_CREDITOS , 0 ) ) , 
						HOPTOTDEB = ( HOPTOTDEB + IFNULL ( V_DEBITOS , 0 ) ) 
					WHERE EMPCOD = V_EMPCOD AND PRVCOD = V_PRVCOD AND HOPNOOBL = V_HOPNOOBL AND MCDPTO = V_MCDPTO AND 
									CNTVIG = V_ANIOGENE AND CNTCOD = V_DC016C ; 
				ELSE 
					INSERT INTO HOJOBLPRV 
					VALUES ( V_EMPCOD , V_PRVCOD , V_HOPNOOBL , V_MCDPTO , V_ANIOGENE , V_DC016C , V_CNUCOD , V_CNUSUB , V_CNCCOD , V_CNTSUB , V_HOPFCHOBL , V_HOPFCHRAD , V_HOPTPPZ , V_HOPVLRCUO , 
							V_HOPCUOINI , V_HOPVLROBL , V_HOPVLRMEX , ( IFNULL ( V_HOPTOTCRE , 0 ) + IFNULL ( V_CREDITOS , 0 ) ) , ( IFNULL ( V_HOPTOTDEB , 0 ) + IFNULL ( V_DEBITOS , 0 ) ) , V_HOPMVTER , 
							V_HOJFCHCAN , V_HOPESTAFPT , V_HOJNROOC , V_HOJBASDES , V_HOJDOCOC , V_HOPSEDCAU , V_HOPDOCCAU , V_HOPNROCAU , V_HOPHOM , V_HOJSEDOC , V_HOPCODCON , V_HOPCODCOR ) ; 
				END IF ; 
			END FOR ; 
END IF ; 
END IF ; 
END  ; 
  
GRANT ALTER , EXECUTE   
ON SPECIFIC PROCEDURE HOSVITAL.SP_INICIALIZAR_SALDOS 
TO HOSVITAL ;
